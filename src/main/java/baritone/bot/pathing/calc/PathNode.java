package baritone.bot.pathing.calc;

import baritone.bot.pathing.movement.Movement;
import baritone.bot.pathing.goals.Goal;
import net.minecraft.util.math.BlockPos;

import java.util.Objects;

/**
 * A node in the path, containing the cost and steps to get to it.
 *
 * @author leijurv
 */
class PathNode {
    final BlockPos pos;
    final Goal goal;
    final double estimatedCostToGoal;

    // These three fields are mutable and are changed by PathFinder
    double cost;
    PathNode previous;
    Movement previousMovement;

    /**
     * Is this a member of the open set in A*? (only used during pathfinding)
     */
    boolean isOpen;
    /**
     * In the linked list of open nodes, which one is next? (only used during pathfinding)
     */
    PathNode nextOpen;

    public PathNode(BlockPos pos, Goal goal) {
        this.pos = pos;
        this.previous = null;
        this.cost = Short.MAX_VALUE;
        this.goal = goal;
        this.estimatedCostToGoal = goal.heuristic(pos);
        this.previousMovement = null;
        this.isOpen = false;
    }


    // TODO possibly reimplement hashCode and equals. They are necessary for this class to function but they could be done better
    @Override
    public int hashCode() {//this is some OG code right here
        int hash = 3241;
        hash = 3457689 * hash + this.pos.getX();
        hash = 8734625 * hash + this.pos.getY();
        hash = 2873465 * hash + this.pos.getZ();
        hash = 3241543 * hash + Objects.hashCode(this.goal);//don't call goal.hashcode. this calls objects hashcode to verify that the actual goal objects are == identical, which is important for node caching
        return hash;
    }

    @Override
    public boolean equals(Object obj) {//autogenerated by netbeans. that's why it looks disgusting.
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final PathNode other = (PathNode) obj;
        if (!Objects.equals(this.pos, other.pos)) {
            return false;
        }
        return Objects.equals(this.goal, other.goal);
    }
}
